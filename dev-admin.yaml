AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TuCita 247 Admin Backend

Parameters:
  UserPoolId:
    Type: String
    Description: User poolID for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.8
    Environment:
        Variables:
            devCors: "http://localhost:4200"
            prodCors: "https://console.tucita247.com"
    VpcConfig:
      SecurityGroupIds: 
        - sg-ecf44cd2
      SubnetIds: 
        - subnet-606ac106
        - subnet-6af4454b
        - subnet-398ff474
        - subnet-9a8f3bc5
    
Resources:
  HttpApi:
    ApiId: HttpApi
    Type: AWS::Serverless::HttpApi
    Name: TuCita247Admin
    Properties:  
      Domain:
        DomainName: dev-apiadmin.tucita247.com
        CertificateArn: arn:aws:acm:us-east-1:374759743337:certificate/74aec86a-dbe8-4036-bef2-e2d0f63c17b4
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z037536229A3K7KNHK3OM
      Auth:
        Authorizers:
          CognitoAuth:
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${AWS::Region}_${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - GET
          - PUT
          - PATCH
          - DELETE
          - POST
        AllowOrigins:
          - http://localhost:4200
          - https://tucita247.local
          - https://dev-console.tucita247.com
          - https://dev-tucita247.com
        AllowHeaders:
          - content-type
          - authorization
        MaxAge: "10"
        AllowCredentials: True
  
  GetBusinessAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusinessAdmin
      CodeUri: getBusinessAdmin/
      Handler: getBusinessAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /business/admin
            Method: get
            ApiId: !Ref HttpApi

  GetUsersAdminFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: GetUsersAdmin
        CodeUri: getUsersAdmin/
        Handler: getUsersAdmin.lambda_handler
        Role: arn:aws:iam::374759743337:role/LambdaDynamo
        Layers: 
          - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
          # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
          - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
        Events:
          RootGet:
            Type: HttpApi
            Properties:
              Auth:
                Authorizer: CognitoAuth
              Path: /users/{businessId}/{perPage}/{searchValue}/{lastItem}
              Method: get
              ApiId: !Ref HttpApi

  GetUserAdminFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: GetUserAdmin
        CodeUri: getUserAdmin/
        Handler: getUserAdmin.lambda_handler
        Role: arn:aws:iam::374759743337:role/LambdaDynamo
        Layers: 
          - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
          # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
          - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
        Events:
          RootGet:
            Type: HttpApi
            Properties:
              Auth:
                Authorizer: CognitoAuth
              Path: /user/{id}/{businessId}
              Method: get
              ApiId: !Ref HttpApi
          
  PostUserAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostUserAdmin
      CodeUri: postUserAdmin/
      Handler: postUserAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:Cryptodome:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: post
            ApiId: !Ref HttpApi

  PutUserAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutUserAdmin
      CodeUri: putUserAdmin/
      Handler: putUserAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: put
            ApiId: !Ref HttpApi

  DelUserAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DelUserAdmin
      CodeUri: delUserAdmin/
      Handler: delUserAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/{id}/{businessId}
            Method: delete
            ApiId: !Ref HttpApi

  GetRolesAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRolesAdmin
      CodeUri: getRolesAdmin/
      Handler: getRolesAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /roles/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  DelRoleAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DelRoleAdmin
      CodeUri: delRoleAdmin/
      Handler: delRoleAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role/{id}/{businessId}
            Method: delete
            ApiId: !Ref HttpApi

  PutRoleAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutRoleAdmin
      CodeUri: putRoleAdmin/
      Handler: putRoleAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role
            Method: put
            ApiId: !Ref HttpApi

  PostRoleAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostRoleAdmin
      CodeUri: postRoleAdmin/
      Handler: postRoleAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role
            Method: post
            ApiId: !Ref HttpApi

  GetRoleAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRoleAdmin
      CodeUri: getRoleAdmin/
      Handler: getRoleAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi

  GetApplicationsAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetApplicationsAdmin
      CodeUri: getApplicationsAdmin/
      Handler: getApplicationsAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /apps/{id}/{businessId}/{language}
            Method: get
            ApiId: !Ref HttpApi

  GetAccessAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAccessAdmin
      CodeUri: getAccessAdmin/
      Handler: getAccessAdmin.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/access/{businessId}/{roleId}
            Method: get
            ApiId: !Ref HttpApi

  PutPlanAdminFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutPlanAdmin
      CodeUri: putPlanAdmin/
      Handler: putPlanAdmin.lambda_handler
      Timeout: 180
      Role: arn:aws:iam::374759743337:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/plan
            Method: put
            ApiId: !Ref HttpApi

  PostMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostMessages
      CodeUri: postMessages/
      Handler: postMessages.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamoMessage
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /messages
            Method: post
            ApiId: !Ref HttpApi

  PutCancelNoShowFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutCancelNoShow
      CodeUri: putCancelNoShow/
      Handler: putCancelNoShow.lambda_handler
      Role: arn:aws:iam::374759743337:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:374759743337:layer:boto3:2
        # - arn:aws:lambda:us-east-1:374759743337:layer:botocore:1
        - arn:aws:lambda:us-east-1:374759743337:layer:requests:1
        - arn:aws:lambda:us-east-1:374759743337:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /appointments/cancel/precheckin/{AppointmentId}
            Method: put
            ApiId: !Ref HttpApi