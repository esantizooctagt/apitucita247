AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CD HelloWorld Lambda

Parameters:
  UserPoolId:
    Type: String
    Description: User poolID for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool
  # SecurityGroupIds: 
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: Security Group IDs that Lambda will use
  #   Default: sg-04131f24
  # VpcSubnetIds: 
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: VPC Subnet IDs that Lambda will use (min 2 for HA)
  #   Default: 
  #     - subnet-a0a8a79e
  #     - subnet-d5599ff4
  #     - subnet-24916a42
  #     - subnet-297ac727

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.8
    Environment:
        Variables:
            devCors: "http://localhost:4200"
            prodCors: "https://console.tucita247.com"
    VpcConfig:
      SecurityGroupIds: 
        - sg-04131f24
        # !Ref SecurityGroupIds
      SubnetIds: 
        - subnet-a0a8a79e
        - subnet-d5599ff4
        - subnet-24916a42
        - subnet-297ac727
        # - !Ref VpcSubnetIds

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        # DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            # AuthorizationScopes:
            #   - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${AWS::Region}_${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - GET
          - PUT
          - PATCH
          - DELETE
          - POST
        AllowOrigins:
          - http://localhost:4200
          - https://console.tucita247.com
        AllowHeaders:
          - content-type
          - authorization
        MaxAge: "10"
        AllowCredentials: True
  
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostLogin
      CodeUri: postLogin/
      Handler: postLogin.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:pyopt:1
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref VpcSubnetIds
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /user/login
            Method: post
            ApiId: !Ref HttpApi

  ForgotPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostForgotPassword
      CodeUri: postForgotPassword/
      Handler: postForgotPassword.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/forgotpassword
            Method: post
            ApiId: !Ref HttpApi

  ResetPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutResetPassword
      CodeUri: putResetPassword/
      Handler: putResetPassword.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/reset/{userId}/{code}
            Method: put
            ApiId: !Ref HttpApi

  EmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetEmail
      CodeUri: getEmail/
      Handler: getEmail.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/validate/{email}
            Method: get
            ApiId: !Ref HttpApi
  
  ApplicationsAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetApplications
      CodeUri: getApplications/
      Handler: getApplications.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /apps/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  ProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUser
      CodeUri: getUser/
      Handler: getUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  UpdateProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutProfile
      CodeUri: putProfile/
      Handler: putProfile.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/profile/{id}
            Method: put
            ApiId: !Ref HttpApi
  
  BusinessRolesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRoles
      CodeUri: getRoles/
      Handler: getRoles.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /roles/{businessId}
            Method: get
            ApiId: !Ref HttpApi
      
  BusinessRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRole
      CodeUri: getRole/
      Handler: getRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
    
  BusinessAddRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostRole
      CodeUri: postRole/
      Handler: postRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role
            Method: post
            ApiId: !Ref HttpApi

  NewBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostUser
      CodeUri: postUser/
      Handler: postUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: post
            ApiId: !Ref HttpApi

  UpdateBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutUser
      CodeUri: putUser/
      Handler: putUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: put
            ApiId: !Ref HttpApi
  
  DeleteBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteUser
      CodeUri: delUser/
      Handler: delUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/{id}/{businessId}
            Method: delete
            ApiId: !Ref HttpApi

  VerificationCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutVerificationCode
      CodeUri: putVerificationCode/
      Handler: putVerificationCode.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/verification/{code}
            Method: put
            ApiId: !Ref HttpApi
        
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUsers
      CodeUri: getUsers/
      Handler: getUsers.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /users/{businessId}/{perPage}/{searchValue}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  ProfileBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusiness
      CodeUri: getBusiness/
      Handler: getBusiness.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/{id}
            Method: get
            ApiId: !Ref HttpApi
  
# Outputs:
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
# HelloWorldFunction:
#   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
#   Properties:
#     FunctionName: GetHelloWorld
#     CodeUri: hello_world/
#     Handler: getHello.lambda_handler
#     Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
#     Layers: 
#       - arn:aws:lambda:us-east-1:821843840552:layer:boto3:1
#     # VpcConfig:
#     #   SecurityGroupIds: !Ref SecurityGroupIds
#     #   SubnetIds: !Ref VpcSubnetIds
#     Events:
#       RootGet:
#         Type: HttpApi
#         Properties:
#           Path: /
#           Method: get
#           ApiId: !Ref HttpApi