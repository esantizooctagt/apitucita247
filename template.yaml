AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: CD HelloWorld Lambda

Parameters:
  UserPoolId:
    Type: String
    Description: User poolID for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool
  # SecurityGroupIds: 
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: Security Group IDs that Lambda will use
  #   Default: sg-04131f24
  # VpcSubnetIds: 
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: VPC Subnet IDs that Lambda will use (min 2 for HA)
  #   Default: 
  #     - subnet-a0a8a79e
  #     - subnet-d5599ff4
  #     - subnet-24916a42
  #     - subnet-297ac727

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.8
    Environment:
        Variables:
            devCors: "http://localhost:4200"
            prodCors: "https://console.tucita247.com"
    VpcConfig:
      SecurityGroupIds: 
        - sg-04131f24
        # !Ref SecurityGroupIds
      SubnetIds: 
        - subnet-a0a8a79e
        - subnet-d5599ff4
        - subnet-24916a42
        - subnet-297ac727
        # - !Ref VpcSubnetIds

Resources:
  HttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      Auth:
        # DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            # AuthorizationScopes:
            #   - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${AWS::Region}_${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - GET
          - PUT
          - PATCH
          - DELETE
          - POST
        AllowOrigins:
          - http://localhost:4200
          - http://localhost:8100
          - https://console.tucita247.com
        AllowHeaders:
          - content-type
          - authorization
        MaxAge: "10"
        AllowCredentials: True
  
  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostLogin
      CodeUri: postLogin/
      Handler: postLogin.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:pyopt:1
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      # VpcConfig:
      #   SecurityGroupIds: !Ref SecurityGroupIds
      #   SubnetIds: !Ref VpcSubnetIds
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /user/login
            Method: post
            ApiId: !Ref HttpApi

  ForgotPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostForgotPassword
      CodeUri: postForgotPassword/
      Handler: postForgotPassword.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/forgotpassword
            Method: post
            ApiId: !Ref HttpApi

  ResetPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutResetPassword
      CodeUri: putResetPassword/
      Handler: putResetPassword.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/reset/{userId}/{code}
            Method: put
            ApiId: !Ref HttpApi

  EmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetEmail
      CodeUri: getEmail/
      Handler: getEmail.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/validate/{email}
            Method: get
            ApiId: !Ref HttpApi
  
  ApplicationsAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetApplications
      CodeUri: getApplications/
      Handler: getApplications.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /apps/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  ProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUser
      CodeUri: getUser/
      Handler: getUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  UpdateProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutProfile
      CodeUri: putProfile/
      Handler: putProfile.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/profile/{id}
            Method: put
            ApiId: !Ref HttpApi
  
  BusinessRolesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRoles
      CodeUri: getRoles/
      Handler: getRoles.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /roles/{businessId}
            Method: get
            ApiId: !Ref HttpApi
      
  BusinessRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRole
      CodeUri: getRole/
      Handler: getRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
    
  BusinessAddRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostRole
      CodeUri: postRole/
      Handler: postRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role
            Method: post
            ApiId: !Ref HttpApi

  BusinessEditRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutRole
      CodeUri: putRole/
      Handler: putRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role
            Method: patch
            ApiId: !Ref HttpApi

  BusinessDeleteRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteRole
      CodeUri: delRole/
      Handler: delRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role/{id}/{businessId}
            Method: delete
            ApiId: !Ref HttpApi

  NewBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostUser
      CodeUri: postUser/
      Handler: postUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: post
            ApiId: !Ref HttpApi

  UpdateBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutUser
      CodeUri: putUser/
      Handler: putUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: put
            ApiId: !Ref HttpApi
  
  DeleteBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteUser
      CodeUri: delUser/
      Handler: delUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/{id}/{businessId}
            Method: delete
            ApiId: !Ref HttpApi

  VerificationCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutVerificationCode
      CodeUri: putVerificationCode/
      Handler: putVerificationCode.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/verification/{code}
            Method: put
            ApiId: !Ref HttpApi
        
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUsers
      CodeUri: getUsers/
      Handler: getUsers.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /users/{businessId}/{perPage}/{searchValue}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  ProfileBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusiness
      CodeUri: getBusiness/
      Handler: getBusiness.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/{id}
            Method: get
            ApiId: !Ref HttpApi

  CustomerFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostClientApp
      CodeUri: postClientApp/
      Handler: postClientApp.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /client
            Method: post
            ApiId: !Ref HttpApi
  
  CustomerActivateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutActivateClient
      CodeUri: putActivateClient/
      Handler: putActivateClient.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /client
            Method: put
            ApiId: !Ref HttpApi

  CustomerLoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostLoginApp
      CodeUri: postLoginApp/
      Handler: postLoginApp.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /client/login
            Method: post
            ApiId: !Ref HttpApi
  
  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetResult
      CodeUri: getResult/
      Handler: getResult.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /client/search/{search}
            Method: get
            ApiId: !Ref HttpApi
        
  CategoriesFilterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategories
      CodeUri: getCategories/
      Handler: getCategories.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /categories
            Method: get
            ApiId: !Ref HttpApi

  BusinessUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutBusiness
      CodeUri: putBusiness/
      Handler: putBusiness.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/{id}
            Method: put
            ApiId: !Ref HttpApi
    
  LocationsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutLocations
      CodeUri: putLocations/
      Handler: putLocations.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/{businessId}
            Method: put
            ApiId: !Ref HttpApi

  GetLocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocations
      CodeUri: getLocations/
      Handler: getLocations.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/{businessId}/{country}
            Method: get
            ApiId: !Ref HttpApi
        
  GetLocationsHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationsHost
      CodeUri: getLocationsHost/
      Handler: getLocationsHost.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/host/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  GetAppointmentsHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAppointments
      CodeUri: getAppointments/
      Handler: getAppointments.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointments/{businessId}/{locationId}/{dateAppoIni}/{dateAppoFin}/{status}/{type}/{lastItem}/{appoId}
            Method: get
            ApiId: !Ref HttpApi

  PutAppointmentsHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointment
      CodeUri: putAppointment/
      Handler: putAppointment.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/{id}
            Method: put
            ApiId: !Ref HttpApi

  GetHostDoorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetHostDoor
      CodeUri: getHostDoor/
      Handler: getHostDoor.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /host/{businessId}/{userId}
            Method: get
            ApiId: !Ref HttpApi

  PostNewAppointmentsHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostNewAppointment
      CodeUri: postNewAppointment/
      Handler: postNewAppointment.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/host
            Method: post
            ApiId: !Ref HttpApi

  PutMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutMessage
      CodeUri: putMessage/
      Handler: putMessage.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/chat/{id}/{type}
            Method: put
            ApiId: !Ref HttpApi
  
  GetMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetMessages
      CodeUri: getMessages/
      Handler: getMessages.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/messages/{id}/{type}
            Method: get
            ApiId: !Ref HttpApi
    
  GetReasonsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetReasons
      CodeUri: getReasons/
      Handler: getReasons.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /reasons/{id}
            Method: get
            ApiId: !Ref HttpApi

  GetBusinessOpeHoursFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusinessOpeHours
      CodeUri: getBusinessOpeHours/
      Handler: getBusinessOpeHours.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/opehours/{businessId}/{locationId}
            Method: get
            ApiId: !Ref HttpApi
  
  GetLocationQuantityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationQuantity
      CodeUri: getLocationQuantity/
      Handler: getLocationQuantity.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/checkin/{businessId}/{locationId}
            Method: get
            ApiId: !Ref HttpApi

  PutAppointmentCheckInHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentCheckIn
      CodeUri: putAppointmentCheckIn/
      Handler: putAppointmentCheckIn.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkin/{id}
            Method: put
            ApiId: !Ref HttpApi
        
  GetWalkInsCheckOutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetWalkInsCheckOut
      CodeUri: getWalkInsCheckOut/
      Handler: getWalkInsCheckOut.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/walkins/{businessId}/{locationId}/{dateAppo}
            Method: get
            ApiId: !Ref HttpApi

  GetPreviousAppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetPreviousAppointments
      CodeUri: getPreviousAppointments/
      Handler: getPreviousAppointments.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointments/previous/{businessId}/{locationId}/{dateAppo}/{status}
            Method: get
            ApiId: !Ref HttpApi
    
  PutAvatarFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAvatar
      CodeUri: putAvatar/
      Handler: putAvatar.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoS3
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/avatar/{id}/{businessId}
            Method: put
            ApiId: !Ref HttpApi
          
  PutOpenLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutOpenLocation
      CodeUri: putOpenLocation/
      Handler: putOpenLocation.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/open/{id}/{businessId}
            Method: put
            ApiId: !Ref HttpApi
          
  PutClosedLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutClosedLocation
      CodeUri: putClosedLocation/
      Handler: putClosedLocation.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/closed/{id}/{businessId}
            Method: put
            ApiId: !Ref HttpApi

  PutAppointmentCheckOutHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentCheckOut
      CodeUri: putAppointmentCheckOut/
      Handler: putAppointmentCheckOut.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkout
            Method: put
            ApiId: !Ref HttpApi
          
  PutAppointmentCheckOutWIFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentCheckOutWI
      CodeUri: putAppointmentCheckOutWI/
      Handler: putAppointmentCheckOutWI.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkout/walkins
            Method: put
            ApiId: !Ref HttpApi

  PutAppointmentManualCOFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentManualCO
      CodeUri: putAppointmentManualCO/
      Handler: putAppointmentManualCO.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkout/manual/{businessId}/{locationId}
            Method: put
            ApiId: !Ref HttpApi

  PutBusinessImgFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutBusinessImg
      CodeUri: putBusinessImg/
      Handler: putBusinessImg.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoS3
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/imagen/{businessId}
            Method: put
            ApiId: !Ref HttpApi

  GetBusinessParentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusinessParent
      CodeUri: getBusinessParent/
      Handler: getBusinessParent.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/parents
            Method: get
            ApiId: !Ref HttpApi
    
  GetCitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCities
      CodeUri: getCities/
      Handler: getCities.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/cities/{country}
            Method: get
            ApiId: !Ref HttpApi
        
  GetSectorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetSectors
      CodeUri: getSectors/
      Handler: getSectors.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/sectors/{country}/{city}
            Method: get
            ApiId: !Ref HttpApi

  GetUsersLocFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUsersLoc
      CodeUri: getUsersLoc/
      Handler: getUsersLoc.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /users/location/{businessId}/{items}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi
        
  GetLocationsCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationsCode
      CodeUri: getLocationsCode/
      Handler: getLocationsCode.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/Codes/{businessId}
            Method: get
            ApiId: !Ref HttpApi

  PutUsersLocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutUsersLocations
      CodeUri: putUsersLocations/
      Handler: putUsersLocations.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /users/location/{businessId}
            Method: put
            ApiId: !Ref HttpApi

  PostPollFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostPoll
      CodeUri: postPoll/
      Handler: postPoll.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /poll
            Method: post
            ApiId: !Ref HttpApi
        
  GetPollsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetPolls
      CodeUri: getPolls/
      Handler: getPolls.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /polls/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  GetPollFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetPoll
      CodeUri: getPoll/
      Handler: getPoll.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /poll/{pollId}
            Method: get
            ApiId: !Ref HttpApi

  DelPollFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DelPoll
      CodeUri: delPoll/
      Handler: delPoll.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /poll/{pollId}/{businessId}/{datePoll}
            Method: delete
            ApiId: !Ref HttpApi
            
  PostPollUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostPollUser
      CodeUri: postPollUser/
      Handler: postPollUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            # Auth:
            #   Authorizer: CognitoAuth
            Path: /poll/user
            Method: post
            ApiId: !Ref HttpApi

# Outputs:
#  outputs  
#   # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
#   # Find out more about other implicit resources you can reference within SAM
#   # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
#   HelloWorldApi:
#     Description: "API Gateway endpoint URL for Prod stage for Hello World function"
#     Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/"
#   HelloWorldFunction:
#     Description: "Hello World Lambda Function ARN"
#     Value: !GetAtt HelloWorldFunction.Arn
#   HelloWorldFunctionIamRole:
#     Description: "Implicit IAM Role created for Hello World function"
#     Value: !GetAtt HelloWorldFunctionRole.Arn
# HelloWorldFunction:
#   Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
#   Properties:
#     FunctionName: GetHelloWorld
#     CodeUri: hello_world/
#     Handler: getHello.lambda_handler
#     Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
#     Layers: 
#       - arn:aws:lambda:us-east-1:821843840552:layer:boto3:1
#     # VpcConfig:
#     #   SecurityGroupIds: !Ref SecurityGroupIds
#     #   SubnetIds: !Ref VpcSubnetIds
#     Events:
#       RootGet:
#         Type: HttpApi
#         Properties:
#           Path: /
#           Method: get
#           ApiId: !Ref HttpApi