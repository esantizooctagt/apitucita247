AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TuCita 247 App

Parameters:
  UserPoolId:
    Type: String
    Description: User poolID for Cognito provider
  Audience:
    Type: String
    Description: Client id for user pool
  # SecurityGroupIds: 
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: Security Group IDs that Lambda will use
  #   Default: sg-04131f24
  # VpcSubnetIds: 
  #   Type: List<AWS::EC2::SecurityGroup::Id>
  #   Description: VPC Subnet IDs that Lambda will use (min 2 for HA)
  #   Default: 
  #     - subnet-a0a8a79e
  #     - subnet-d5599ff4
  #     - subnet-24916a42
  #     - subnet-297ac727

Globals:
  Function:
    Timeout: 30
    MemorySize: 128
    Runtime: python3.8
    Environment:
        Variables:
            devCors: "http://localhost:4200"
            prodCors: "https://console.tucita247.com"
    VpcConfig:
      SecurityGroupIds: 
        - sg-04131f24
        # !Ref SecurityGroupIds
      SubnetIds: 
        - subnet-a0a8a79e
        - subnet-d5599ff4
        - subnet-24916a42
        - subnet-297ac727
        # - !Ref VpcSubnetIds

Resources:
  HttpApi:
    ApiId: HttpApi
    Type: AWS::Serverless::HttpApi
    Name: TuCita247
    Properties:
      Domain:
        DomainName: api.tucita247.com
        CertificateArn: arn:aws:acm:us-east-1:821843840552:certificate/91a63656-8adc-479c-96a4-1345641cf20b
        EndpointConfiguration: REGIONAL
        Route53:
          HostedZoneId: Z05029142564P6F9HXWMB
      Auth:
        # DefaultAuthorizer: CognitoAuth
        Authorizers:
          CognitoAuth:
            # AuthorizationScopes:
            #   - email
            IdentitySource: "$request.header.Authorization"
            JwtConfiguration:
              issuer: !Sub https://cognito-idp.${AWS::Region}.amazonaws.com/${AWS::Region}_${UserPoolId}
              audience:
                - !Ref Audience
      CorsConfiguration:
        AllowMethods:
          - GET
          - PUT
          - PATCH
          - DELETE
          - POST
        AllowOrigins:
          - http://localhost:4200
          - http://127.0.0.1:8000
          - https://tucita247.local
          - https://console.tucita247.com
          - https://tucita247.com
        AllowHeaders:
          - content-type
          - authorization
        MaxAge: "10"
        AllowCredentials: True

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostLogin
      CodeUri: postLogin/
      Handler: postLogin.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:jwt:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/login
            Method: post
            ApiId: !Ref HttpApi

  ForgotPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostForgotPassword
      CodeUri: postForgotPassword/
      Handler: postForgotPassword.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/forgotpassword
            Method: post
            ApiId: !Ref HttpApi

  ResetPassFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutResetPassword
      CodeUri: putResetPassword/
      Handler: putResetPassword.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/reset/{userId}/{code}
            Method: put
            ApiId: !Ref HttpApi

  EmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetEmail
      CodeUri: getEmail/
      Handler: getEmail.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/validate/{email}
            Method: get
            ApiId: !Ref HttpApi
  
  ApplicationsAccessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetApplications
      CodeUri: getApplications/
      Handler: getApplications.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /apps/{id}/{businessId}/{language}
            Method: get
            ApiId: !Ref HttpApi
  
  ProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUser
      CodeUri: getUser/
      Handler: getUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  UpdateProfileFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutProfile
      CodeUri: putProfile/
      Handler: putProfile.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/profile/{id}
            Method: put
            ApiId: !Ref HttpApi
  
  BusinessRolesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRoles
      CodeUri: getRoles/
      Handler: getRoles.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /roles/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi
      
  BusinessRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetRole
      CodeUri: getRole/
      Handler: getRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role/{id}/{businessId}
            Method: get
            ApiId: !Ref HttpApi
    
  BusinessAddRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostRole
      CodeUri: postRole/
      Handler: postRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role
            Method: post
            ApiId: !Ref HttpApi

  BusinessEditRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutRole
      CodeUri: putRole/
      Handler: putRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role
            Method: patch
            ApiId: !Ref HttpApi

  BusinessDeleteRoleFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteRole
      CodeUri: delRole/
      Handler: delRole.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /role/{id}/{businessId}
            Method: delete
            ApiId: !Ref HttpApi

  NewBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostUser
      CodeUri: postUser/
      Handler: postUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: post
            ApiId: !Ref HttpApi

  UpdateBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutUser
      CodeUri: putUser/
      Handler: putUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user
            Method: put
            ApiId: !Ref HttpApi
  
  DeleteBusinessUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DeleteUser
      CodeUri: delUser/
      Handler: delUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/{id}/{businessId}
            Method: delete
            ApiId: !Ref HttpApi

  VerificationCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutVerificationCode
      CodeUri: putVerificationCode/
      Handler: putVerificationCode.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/verification/{code}
            Method: put
            ApiId: !Ref HttpApi
        
  UsersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUsers
      CodeUri: getUsers/
      Handler: getUsers.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /users/{businessId}/{perPage}/{searchValue}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  ProfileBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusiness
      CodeUri: getBusiness/
      Handler: getBusiness.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/{id}/{language}
            Method: get
            ApiId: !Ref HttpApi
        
  CategoriesFilterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCategories
      CodeUri: getCategories/
      Handler: getCategories.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /categories/{language}
            Method: get
            ApiId: !Ref HttpApi

  BusinessUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutBusiness
      CodeUri: putBusiness/
      Handler: putBusiness.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/{id}
            Method: put
            ApiId: !Ref HttpApi
    
  LocationsUpdateFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutLocations
      CodeUri: putLocations/
      Handler: putLocations.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/{businessId}
            Method: put
            ApiId: !Ref HttpApi

  GetLocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocations
      CodeUri: getLocations/
      Handler: getLocations.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/{businessId}/{country}/{language}
            Method: get
            ApiId: !Ref HttpApi
        
  GetLocationsHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationsHost
      CodeUri: getLocationsHost/
      Handler: getLocationsHost.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/host/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  GetAppointmentsHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAppointments
      CodeUri: getAppointments/
      Handler: getAppointments.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointments/{businessId}/{locationId}/{providerId}/{dateAppoIni}/{dateAppoFin}/{status}/{type}
            Method: get
            ApiId: !Ref HttpApi
    
  GetAppointmentsScheFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAppointmentsSche
      CodeUri: getAppointmentsSche/
      Handler: getAppointmentsSche.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointments/{businessId}/{locationId}/{providerId}/{dateAppoIni}
            Method: get
            ApiId: !Ref HttpApi

  PutAppointmentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointment
      CodeUri: putAppointment/
      Handler: putAppointment.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:requests:7
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/{id}
            Method: put
            ApiId: !Ref HttpApi

  GetHostDoorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetHostDoor
      CodeUri: getHostDoor/
      Handler: getHostDoor.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /host/{businessId}/{userId}
            Method: get
            ApiId: !Ref HttpApi

  PostNewAppointmentsHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostNewAppointment
      CodeUri: postNewAppointment/
      Handler: postNewAppointment.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:requests:7
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/host
            Method: post
            ApiId: !Ref HttpApi

  PutMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutMessage
      CodeUri: putMessage/
      Handler: putMessage.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:requests:7
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/chat/{id}/{type}
            Method: put
            ApiId: !Ref HttpApi
  
  GetMessagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetMessages
      CodeUri: getMessages/
      Handler: getMessages.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/messages/{id}/{type}
            Method: get
            ApiId: !Ref HttpApi
    
  GetReasonsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetReasons
      CodeUri: getReasons/
      Handler: getReasons.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /reasons/{id}
            Method: get
            ApiId: !Ref HttpApi

  GetBusinessOpeHoursFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusinessOpeHours
      CodeUri: getBusinessOpeHours/
      Handler: getBusinessOpeHours.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/opehours/{businessId}/{locationId}
            Method: get
            ApiId: !Ref HttpApi
  
  GetLocationQuantityFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationQuantity
      CodeUri: getLocationQuantity/
      Handler: getLocationQuantity.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/checkin/{businessId}/{locationId}
            Method: get
            ApiId: !Ref HttpApi

  PutAppointmentCheckInHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentCheckIn
      CodeUri: putAppointmentCheckIn/
      Handler: putAppointmentCheckIn.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:requests:7
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkin/{id}
            Method: put
            ApiId: !Ref HttpApi

  PutAppointmentCheckInQRFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentCheckInQR
      CodeUri: putAppointmentCheckInQR/
      Handler: putAppointmentCheckInQR.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkinqr/{id}
            Method: put
            ApiId: !Ref HttpApi
        
  GetWalkInsCheckOutFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetWalkInsCheckOut
      CodeUri: getWalkInsCheckOut/
      Handler: getWalkInsCheckOut.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/walkins/{businessId}/{locationId}/{dateAppo}
            Method: get
            ApiId: !Ref HttpApi

  GetPreviousAppointmentsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetPreviousAppointments
      CodeUri: getPreviousAppointments/
      Handler: getPreviousAppointments.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointments/previous/{businessId}/{locationId}/{providerId}/{dateAppo}/{status}
            Method: get
            ApiId: !Ref HttpApi
    
  PutAvatarFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAvatar
      CodeUri: putAvatar/
      Handler: putAvatar.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoS3
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /user/avatar/{id}/{businessId}
            Method: put
            ApiId: !Ref HttpApi
          
  PutOpenLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutOpenLocation
      CodeUri: putOpenLocation/
      Handler: putOpenLocation.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/open/{id}/{businessId}
            Method: put
            ApiId: !Ref HttpApi
          
  PutClosedLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutClosedLocation
      CodeUri: putClosedLocation/
      Handler: putClosedLocation.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:requests:7
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/closed/{id}/{businessId}/{closed}
            Method: put
            ApiId: !Ref HttpApi

  PutAppointmentCheckOutHostFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentCheckOut
      CodeUri: putAppointmentCheckOut/
      Handler: putAppointmentCheckOut.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:requests:7
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkout
            Method: put
            ApiId: !Ref HttpApi

  PutAppointmentManualCOFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutAppointmentManualCO
      CodeUri: putAppointmentManualCO/
      Handler: putAppointmentManualCO.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/checkout/manual/{businessId}/{locationId}/{providerId}/{qtyGuests}
            Method: put
            ApiId: !Ref HttpApi

  PutBusinessImgFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutBusinessImg
      CodeUri: putBusinessImg/
      Handler: putBusinessImg.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoS3
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/imagen/{businessId}
            Method: put
            ApiId: !Ref HttpApi

  GetBusinessParentFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusinessParent
      CodeUri: getBusinessParent/
      Handler: getBusinessParent.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/parents
            Method: get
            ApiId: !Ref HttpApi
    
  GetCitiesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCities
      CodeUri: getCities/
      Handler: getCities.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /locations/cities/{country}/{language}/{city}
            Method: get
            ApiId: !Ref HttpApi
        
  GetSectorsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetSectors
      CodeUri: getSectors/
      Handler: getSectors.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/sectors/{country}/{city}/{language}
            Method: get
            ApiId: !Ref HttpApi

  GetUsersLocFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetUsersLoc
      CodeUri: getUsersLoc/
      Handler: getUsersLoc.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /users/location/{businessId}/{items}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi
        
  GetLocationsCodeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationsCode
      CodeUri: getLocationsCode/
      Handler: getLocationsCode.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/Codes/{businessId}
            Method: get
            ApiId: !Ref HttpApi

  PutUsersLocationsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutUsersLocations
      CodeUri: putUsersLocations/
      Handler: putUsersLocations.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /users/location/{businessId}
            Method: put
            ApiId: !Ref HttpApi

  PostPollFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostPoll
      CodeUri: postPoll/
      Handler: postPoll.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /poll
            Method: post
            ApiId: !Ref HttpApi
        
  GetPollsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetPolls
      CodeUri: getPolls/
      Handler: getPolls.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /polls/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  GetPollFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetPoll
      CodeUri: getPoll/
      Handler: getPoll.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /poll/{pollId}
            Method: get
            ApiId: !Ref HttpApi

  DelPollFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DelPoll
      CodeUri: delPoll/
      Handler: delPoll.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /poll/{pollId}/{businessId}/{datePoll}
            Method: delete
            ApiId: !Ref HttpApi
            
  PostPollUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostPollUser
      CodeUri: postPollUser/
      Handler: postPollUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /poll/user
            Method: post
            ApiId: !Ref HttpApi

  GetLocationQuantityAllFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationQuantityAll
      CodeUri: getLocationQuantityAll/
      Handler: getLocationQuantityAll.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/checkinall/{businessId}/{locationId}
            Method: get
            ApiId: !Ref HttpApi
  
  GetLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLink
      CodeUri: getLink/
      Handler: getLink.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/link/{link}
            Method: get
            ApiId: !Ref HttpApi
  
  PutBusinessImgLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutBusinessImgLink
      CodeUri: putBusinessImgLink/
      Handler: putBusinessImgLink.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoS3
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/imagen/link/{businessId}
            Method: put
            ApiId: !Ref HttpApi
  
  PostSurveyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostSurvey
      CodeUri: postSurvey/
      Handler: postSurvey.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /survey
            Method: post
            ApiId: !Ref HttpApi
        
  GetSurveysFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetSurveys
      CodeUri: getSurveys/
      Handler: getSurveys.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /surveys/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  GetSurveyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetSurvey
      CodeUri: getSurvey/
      Handler: getSurvey.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /survey/{surveyId}
            Method: get
            ApiId: !Ref HttpApi

  DelSurveyFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DelSurvey
      CodeUri: delSurvey/
      Handler: delSurvey.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /survey/{surveyId}/{businessId}/{dateSurvey}
            Method: delete
            ApiId: !Ref HttpApi
            
  PostSurveyUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostSurveyUser
      CodeUri: postSurveyUser/
      Handler: postSurveyUser.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /survey/user
            Method: post
            ApiId: !Ref HttpApi

  GetBusinessApposFunction:
      Type: AWS::Serverless::Function
      Properties:
        FunctionName: GetBusinessAppos
        CodeUri: getBusinessAppos/
        Handler: getBusinessAppos.lambda_handler
        Role: arn:aws:iam::821843840552:role/LambdaDynamo
        Layers: 
          - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
          - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
          - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        Events:
          RootGet:
            Type: HttpApi
            Properties:
              Auth:
                Authorizer: CognitoAuth
              Path: /business/appos/{businessId}
              Method: get
              ApiId: !Ref HttpApi

  GetBusinessLandingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusinessLanding
      CodeUri: getBusinessLanding/
      Handler: getBusinessLanding.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /business/landing/{link}
            Method: get
            ApiId: !Ref HttpApi

  GetApposAverageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetApposAverage
      CodeUri: getApposAverage/
      Handler: getApposAverage.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /appointments/average/{locationId}/{providerId}/{initDate}
            Method: get
            ApiId: !Ref HttpApi
  
  PutRefreshTokenFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutRefreshToken
      CodeUri: putRefreshToken/
      Handler: putRefreshToken.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/token
            Method: put
            ApiId: !Ref HttpApi

  GetOpeHoursFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetOpeHours
      CodeUri: getOpeHours/
      Handler: getOpeHours.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/opeHours/{businessId}/{locationId}/{providerId}/{initDay}
            Method: get
            ApiId: !Ref HttpApi
      
  GetAppoDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetAppoData
      CodeUri: getAppoData/
      Handler: getAppoData.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/data/{businessId}/{locationId}/{providerId}/{qrCode}
            Method: get
            ApiId: !Ref HttpApi

  PutCancelApposFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutCancelAppos
      CodeUri: putCancelAppos/
      Handler: putCancelAppos.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:requests:7
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /appointment/{businessId}/{locationId}/{providerId}/{dateAppo}
            Method: put
            ApiId: !Ref HttpApi

  GetDaysOffFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetDaysOff
      CodeUri: getDaysOff/
      Handler: getDaysOff.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/daysoff/{businessId}/{locationId}/{providerId}/{year}
            Method: get
            ApiId: !Ref HttpApi
            
  PutDaysOffFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutDaysOff
      CodeUri: putDaysOff/
      Handler: putDaysOff.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/daysoff/{businessId}/{locationId}/{providerId}/{dateOpe}/{tipo}
            Method: put
            ApiId: !Ref HttpApi

  GetOpeningHoursFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetOpeningHours
      CodeUri: getOpeningHours/
      Handler: getOpeningHours.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/openinghours/{businessId}/{locationId}/{providerId}
            Method: get
            ApiId: !Ref HttpApi

  PutOpeningHoursFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutOpeningHours
      CodeUri: putOpeningHours/
      Handler: putOpeningHours.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers:
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/openinghours/{businessId}/{locationId}/{providerId}
            Method: put
            ApiId: !Ref HttpApi

  GetCitaLinkFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetCitaLink
      CodeUri: getCitaLink/
      Handler: getCitaLink.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /business/tucitalink/{link}
            Method: get
            ApiId: !Ref HttpApi
      
  GetValidEmailFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetValidEmail
      CodeUri: getValidEmail/
      Handler: getValidEmail.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSNS
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /business/validemail/{email}
            Method: get
            ApiId: !Ref HttpApi
  
  GetBusinessCountryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetBusinessCountry
      CodeUri: getBusinessCountry/
      Handler: getBusinessCountry.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/country/{businessId}
            Method: get
            ApiId: !Ref HttpApi
  
  GetProvidersFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetProviders
      CodeUri: getProviders/
      Handler: getProviders.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /providers/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  GetProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetProvider
      CodeUri: getProvider/
      Handler: getProvider.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /provider/{businessId}/{providerId}
            Method: get
            ApiId: !Ref HttpApi

  PostProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostProvider
      CodeUri: postProvider/
      Handler: postProvider.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /provider
            Method: post
            ApiId: !Ref HttpApi

  DelProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DelProvider
      CodeUri: delProvider/
      Handler: delProvider.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /provider/{businessId}/{locationId}/{providerId}
            Method: delete
            ApiId: !Ref HttpApi

  PutInheritParamsFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutInheritParams
      CodeUri: putInheritParams/
      Handler: putInheritParams.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /business/params/{businessId}/{locationId}/{providerId}/{value}/{tipo}
            Method: put
            ApiId: !Ref HttpApi
  
  GetServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetServices
      CodeUri: getServices/
      Handler: getServices.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /services/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  GetServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetService
      CodeUri: getService/
      Handler: getService.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /service/{businessId}/{serviceId}
            Method: get
            ApiId: !Ref HttpApi

  PostServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostService
      CodeUri: postService/
      Handler: postService.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /service
            Method: post
            ApiId: !Ref HttpApi

  DelServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: DelService
      CodeUri: delService/
      Handler: delService.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /service/{businessId}/{serviceId}
            Method: delete
            ApiId: !Ref HttpApi
  
  GetServicesProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetServicesProvider
      CodeUri: getServicesProvider/
      Handler: getServicesProvider.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /services/{businessId}/{providerId}
            Method: get
            ApiId: !Ref HttpApi

  PutServiceProviderFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutServiceProvider
      CodeUri: putServiceProvider/
      Handler: putServiceProvider.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /service/{businessId}/{providerId}/{serviceId}/{activo}
            Method: put
            ApiId: !Ref HttpApi

  GetLocationsDataFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocationsData
      CodeUri: getLocationsData/
      Handler: getLocationsData.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /locations/{businessId}/{items}/{search}/{lastItem}
            Method: get
            ApiId: !Ref HttpApi

  GetLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetLocation
      CodeUri: getLocation/
      Handler: getLocation.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /location/data/{businessId}/{locationId}/{country}/{language}
            Method: get
            ApiId: !Ref HttpApi

  PostLocationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PostLocation
      CodeUri: postLocation/
      Handler: postLocation.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /location
            Method: post
            ApiId: !Ref HttpApi
  
  PutBusinessPlanFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutBusinessPlan
      CodeUri: putBusinessPlan/
      Handler: putBusinessPlan.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /business/plan/{businessId}/{plan}/{appos}/{order}
            Method: put
            ApiId: !Ref HttpApi

  PutBusinessSearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutBusinessSearch
      CodeUri: putBusinessSearch/
      Handler: putBusinessSearch.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamoSearch
      Environment:
        Variables:
          cloudSearch: "https://search-tucita247-djl3mvkaapbmo5zjxat7pcnepu.us-east-1.cloudsearch.amazonaws.com"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /business/search
            Method: put
            ApiId: !Ref HttpApi
      
  PutActivateAccountFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutActivateAccount
      CodeUri: putActivateAccount/
      Handler: putActivateAccount.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaCognitoDB
      Environment:
        Variables:
          cognitoId: "us-east-1_gXhBD4bsG"
          cognitoClientId: "52k0o8239mueu31uu5fihccbbf"
          cognitoSecret: "1r2k3dm8748i5dfu632eu8ptai7vocidm01vp3la82nhq91jgqqt"
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
        - arn:aws:lambda:us-east-1:821843840552:layer:Cryptodome:1
      VpcConfig: !Ref AWS::NoValue
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /user/activate/admin
            Method: put
            ApiId: !Ref HttpApi

  GetServicesColorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetServicesColor
      CodeUri: getServicesColor/
      Handler: getServicesColor.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Auth:
              Authorizer: CognitoAuth
            Path: /services/{businessId}
            Method: get
            ApiId: !Ref HttpApi

  GetProvidersLocFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetProvidersLoc
      CodeUri: getProvidersLoc/
      Handler: getProvidersLoc.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /providers/{businessId}/{locationId}
            Method: get
            ApiId: !Ref HttpApi
  
  PutTimeAvailableFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: PutTimeAvailable
      CodeUri: putTimeAvailable/
      Handler: putTimeAvailable.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /appointment/timeava/{businessId}/{locationId}/{providerId}/{dateAppo}
            Method: put
            ApiId: !Ref HttpApi

  GetValidAppoBusinessFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: GetValidAppoBusiness
      CodeUri: getValidAppoBusiness/
      Handler: getValidAppoBusiness.lambda_handler
      Role: arn:aws:iam::821843840552:role/LambdaDynamo
      Layers: 
        - arn:aws:lambda:us-east-1:821843840552:layer:boto3:3
        - arn:aws:lambda:us-east-1:821843840552:layer:botocore:1
        - arn:aws:lambda:us-east-1:821843840552:layer:dynamodb-json:1
      Events:
        RootGet:
          Type: HttpApi
          Properties:
            Path: /business/valid/{businessId}/{locationId}/{providerId}/{serviceId}/{appoDate}/{appoHour}
            Method: get
            ApiId: !Ref HttpApi